version: '3.8'

services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: my_db
      POSTGRES_USER: my_user
      POSTGRES_PASSWORD: my_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: redis:latest
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app_network

  backend-rds:
    ports:
      - "8001:8001"
    image: 767397966663.dkr.ecr.eu-north-1.amazonaws.com/backend_rds:latest
    environment:
      DB_NAME: my_db
      DB_USER: my_user
      DB_PASSWORD: my_pass
      DB_HOST: postgres
      DB_PORT: 5432
      SECRET_KEY: 'your-secret-key-here'
      DEBUG: 'True'
      CORS_ALLOWED_ORIGINS: 'http://localhost'
    depends_on:
      - postgres
    command: sh -c "sleep 10 && python manage.py runserver 0.0.0.0:8001"
    networks:
      - app_network

  backend-redis:
    ports:
      - "8002:8002"
    image: 767397966663.dkr.ecr.eu-north-1.amazonaws.com/backend_redis:latest
    environment:
      SECRET_KEY: 'your-default-secret-key'
      DEBUG: 'True'
      CORS_ALLOWED_ORIGINS: 'http://localhost'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ''
    depends_on:
      - redis
    command: sh -c "sleep 10 && python manage.py runserver 0.0.0.0:8002"
    networks:
      - app_network

  frontend:
    ports:
      - "8000:8000"
    image: 767397966663.dkr.ecr.eu-north-1.amazonaws.com/frontend:latest
    environment:
      - BACKEND_RDS_URL=http://backend-rds:8001/test_connection/
      - BACKEND_REDIS_URL=http://backend-redis:8002/test_connection/
    depends_on:
      - backend-rds
      - backend-redis
    networks:
      - app_network

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge
